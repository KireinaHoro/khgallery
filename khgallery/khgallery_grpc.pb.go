// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: khgallery.proto

package khgallery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GalleryManagerClient is the client API for GalleryManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GalleryManagerClient interface {
	PutPhotos(ctx context.Context, opts ...grpc.CallOption) (GalleryManager_PutPhotosClient, error)
	QueryGallery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PhotoInfo, error)
}

type galleryManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGalleryManagerClient(cc grpc.ClientConnInterface) GalleryManagerClient {
	return &galleryManagerClient{cc}
}

func (c *galleryManagerClient) PutPhotos(ctx context.Context, opts ...grpc.CallOption) (GalleryManager_PutPhotosClient, error) {
	stream, err := c.cc.NewStream(ctx, &GalleryManager_ServiceDesc.Streams[0], "/khgallery.GalleryManager/PutPhotos", opts...)
	if err != nil {
		return nil, err
	}
	x := &galleryManagerPutPhotosClient{stream}
	return x, nil
}

type GalleryManager_PutPhotosClient interface {
	Send(*PhotoInfo) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type galleryManagerPutPhotosClient struct {
	grpc.ClientStream
}

func (x *galleryManagerPutPhotosClient) Send(m *PhotoInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *galleryManagerPutPhotosClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *galleryManagerClient) QueryGallery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PhotoInfo, error) {
	out := new(PhotoInfo)
	err := c.cc.Invoke(ctx, "/khgallery.GalleryManager/QueryGallery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GalleryManagerServer is the server API for GalleryManager service.
// All implementations must embed UnimplementedGalleryManagerServer
// for forward compatibility
type GalleryManagerServer interface {
	PutPhotos(GalleryManager_PutPhotosServer) error
	QueryGallery(context.Context, *emptypb.Empty) (*PhotoInfo, error)
	mustEmbedUnimplementedGalleryManagerServer()
}

// UnimplementedGalleryManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGalleryManagerServer struct {
}

func (UnimplementedGalleryManagerServer) PutPhotos(GalleryManager_PutPhotosServer) error {
	return status.Errorf(codes.Unimplemented, "method PutPhotos not implemented")
}
func (UnimplementedGalleryManagerServer) QueryGallery(context.Context, *emptypb.Empty) (*PhotoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGallery not implemented")
}
func (UnimplementedGalleryManagerServer) mustEmbedUnimplementedGalleryManagerServer() {}

// UnsafeGalleryManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GalleryManagerServer will
// result in compilation errors.
type UnsafeGalleryManagerServer interface {
	mustEmbedUnimplementedGalleryManagerServer()
}

func RegisterGalleryManagerServer(s grpc.ServiceRegistrar, srv GalleryManagerServer) {
	s.RegisterService(&GalleryManager_ServiceDesc, srv)
}

func _GalleryManager_PutPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GalleryManagerServer).PutPhotos(&galleryManagerPutPhotosServer{stream})
}

type GalleryManager_PutPhotosServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PhotoInfo, error)
	grpc.ServerStream
}

type galleryManagerPutPhotosServer struct {
	grpc.ServerStream
}

func (x *galleryManagerPutPhotosServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *galleryManagerPutPhotosServer) Recv() (*PhotoInfo, error) {
	m := new(PhotoInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GalleryManager_QueryGallery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryManagerServer).QueryGallery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khgallery.GalleryManager/QueryGallery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryManagerServer).QueryGallery(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GalleryManager_ServiceDesc is the grpc.ServiceDesc for GalleryManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GalleryManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khgallery.GalleryManager",
	HandlerType: (*GalleryManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryGallery",
			Handler:    _GalleryManager_QueryGallery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutPhotos",
			Handler:       _GalleryManager_PutPhotos_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "khgallery.proto",
}
